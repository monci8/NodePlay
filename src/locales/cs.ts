export default {
    structures: {
        lists: "Seznamy",

        singly: "Jednosmƒõrnƒõ v√°zan√Ω",
        doubly: "Dvousmƒõrnƒõ v√°zan√Ω",
        circularSingly: "Kruhov√Ω jednosmƒõrn√Ω",
        activeList: "Aktivita seznamu:",

        singlyList: "Jednosmƒõrnƒõ v√°zan√Ω seznam",
        doublyList: "Dvousmƒõrnƒõ v√°zan√Ω seznam",
        circularSinglyList: "Kruhov√Ω jednosmƒõrn√Ω seznam",
        stack: "Z√°sobn√≠k",
        queue: "Fronta",
        trees: "Stromov√© datov√© struktury",
        bvs: "Bin√°rn√≠ vyhled√°vac√≠ strom",
        avl: "AVL strom",
        hashes: "Hashovac√≠ tabulky"
    },

    methodBar: {
        initSentence: "Zadej poƒçet prvk≈Ø, kter√Ω se m√° inicializovat:",
        count: "Poƒçet",
        key: "Kl√≠ƒç",
        clear: "Smazat",
        enter: "Potvrdit"
    },

    errors: {
        emptyInput: "Vstup nesm√≠ b√Ωt pr√°zdn√Ω!",
        onlyDigits: "Vstup sm√≠ obsahovat pouze ƒç√≠slice!",
        max3Digits: "Maxim√°lnƒõ 3 ƒç√≠slice!",
        max3Chars: "Maxim√°lnƒõ 3 znaky!",
        max4Chars: "Maxim√°lnƒõ 4 znaky!",
        inputNumber: "Zadej ƒç√≠slo!",
        biggerThanZero: "ƒå√≠slo mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0!",
        lessThanHundred: "ƒå√≠slo mus√≠ b√Ωt men≈°√≠ ne≈æ 100!",
    },

    warnings: {
        mustClean: "Jestli chce≈° vytvo≈ôit vlastn√≠ strukturu, nejprve vyƒçisti plochu.",
        animation: "Animace je v procesu. M≈Ø≈æe≈° si ji klidnƒõ zrychlit. üöÄ",
        stack: {
            mustInit: "Nejd≈ô√≠ve inicializuj strukturu pomoc√≠ `InitStack(S)` nebo `N√°hodnƒõ vygenerovat strukturu`.",
        },
        queue: {
            mustInit: "Nejd≈ô√≠ve inicializuj strukturu pomoc√≠ `InitQueue(Q)` nebo `N√°hodnƒõ vygenerovat strukturu`.",
        },
        lists: {
            mustInit: "Nejd≈ô√≠ve inicializuj strukturu pomoc√≠ `InitList(L)` nebo `N√°hodnƒõ vygenerovat strukturu`.",
            singlyNotActive: "Nejd≈ô√≠ve aktivuj seznam pomoc√≠ `First(L)`.",
            doublyNotActive: "Nejd≈ô√≠ve aktivuj seznam pomoc√≠ `First(L)` nebo `Last(L)`.",
        },
        tables: {
            mustInit: "Nejd≈ô√≠ve inicializuj strukturu pomoc√≠ `InitTable(T)` nebo `N√°hodnƒõ vygenerovat strukturu`.",
        },
    },

    status: {
        animation: "Prob√≠h√° animace...",
        centering: "Prob√≠h√° centrov√°n√≠..."
    },

    home: {
        welcome: "V√≠tej v NodePlay!",
        description: "Tato aplikace ti umo≈æn√≠ interaktivnƒõ prozkoumat datov√© struktury a algoritmy nad nimi.",
        tutorialButton: "Zaƒç√≠t s tutori√°lem"
    },

    tutorial: {
        title: "Jak pou≈æ√≠vat aplikaci",
        steps: [
            "V lev√©m menu si vyber datovou strukturu (nap≈ô. Bin√°rn√≠ vyhled√°vac√≠ strom).",
            "V prav√©m menu inicializuj strukturu (InitTable) a p≈ôidej uzly pomoc√≠ operace Insert. P≈ô√≠padnƒõ si m≈Ø≈æe≈° nechat strukturu vygenerovat n√°hodnƒõ.",
            "Vstup m≈Ø≈æe≈° pou≈æ√≠t ten p≈ôedgenerovan√Ω, nebo si zadat vlastn√≠.",
            "St≈ôedn√≠ ƒç√°st zobrazuje animaci proveden√© operace.",
            "Pomoc√≠ p≈ôep√≠naƒçe m≈Ø≈æe≈° urƒçit, zda chce≈° strukturu posouvat a p≈ôibli≈æovat manu√°lnƒõ, nebo se p≈ôed a po animaci provede automatick√© centrov√°n√≠.",
            "Pomoc√≠ posuvn√≠ku si nastav rychlost animace.",
            "Pokud se ti struktura n√°hodou ztrat√≠ na pl√°tnƒõ, m≈Ø≈æe≈° ji vycentrovat. Pro resetov√°n√≠ struktury vyƒçisti plochu.",
            "Nƒõkter√© metody vrac√≠ v√Ωsledek ‚Äì ten se zobraz√≠ ve v√Ωstupn√≠m dialogu.",
            "V horn√≠ li≈°tƒõ m≈Ø≈æe≈° p≈ôepnout jazyk nebo otev≈ô√≠t tento tutori√°l."
        ]
    },

    header: {
        lang: "Jazyk:",
        tutorial: "Jak pou≈æ√≠vat aplikaci",
        center: "Centrovat graf"
    },

    slider: {
        title: "Rychlost animace",
        slow: "Pomaleji",
        fast: "Rychleji",
    },

    footer: {
        random: "N√°hodnƒõ vygenerovat strukturu",
        clear: "Vyƒçistit plochu",
        automaticCenter: "Automatick√© centrov√°n√≠",
        manualCenter: "Manu√°ln√≠ posouv√°n√≠",
        speed: {
            slowest: "Nejpomalej≈°√≠",
            slower: "Pomalej≈°√≠",
            medium: "St≈ôedn√≠",
            faster: "Rychlej≈°√≠",
            fastest: "Nejrychlej≈°√≠",
            unknown: "Nezn√°m√° rychlost"
        }
    },

    outputDialog: {
        label: "V√Ωstup"
    },

    list: {
        getFirstValue: "GetFirst(L): Hodnota prvn√≠ho prvku je {value}.",
        getFirstError: "GetFirst(L): CHYBA ‚Äì seznam je pr√°zdn√Ω!",
        getLastValue: "GetLast(L): Hodnota posledn√≠ho prvku je {value}.",
        getLastError: "GetLast(L): CHYBA ‚Äì seznam je pr√°zdn√Ω!",
        getActiveValue: "GetValue(L): Hodnota aktivn√≠ho prvku je {value}.",
        getActiveError: "GetValue(L): CHYBA ‚Äì seznam nen√≠ aktivn√≠!",
        notActive: "IsActive(L): False (seznam nen√≠ aktivn√≠).",
        active: "IsActive(L): True (seznam je aktivn√≠).",

        deleteFirstEmpty: "DeleteFirst(L): ≈Ω√°dn√° akce - pokus o smaz√°n√≠ prvn√≠ho prvku v pr√°zdn√©m seznamu.",
        deleteAfterEmpty: "DeleteAfter(L): ≈Ω√°dn√° akce - pokus o smaz√°n√≠ neexistuj√≠c√≠ho prvku za aktivn√≠m prvkem.",
        deleteLastEmpty: "DeleteLast(L): ≈Ω√°dn√° akce - pokus o smaz√°n√≠ posledn√≠ho prvku v pr√°zdn√©m seznamu.",
        deleteBeforeEmpty: "DeleteBefore(L): ≈Ω√°dn√° akce - pokus o smaz√°n√≠ prvku p≈ôed aktivn√≠m prvkem v pr√°zdn√©m seznamu.",
        firstEmpty: "First(L): ≈Ω√°dn√° akce - seznam je pr√°zdn√Ω.",
        lastEmpty: "Last(L): ≈Ω√°dn√° akce - seznam je pr√°zdn√Ω.",
        setActiveValue: "SetValue(L): Hodnota aktivn√≠ho prvku byla zmƒõnƒõna na hodnotu {value}.",
    },
    stack: {
        top: "Top(S): Hodnota prvku na vrcholu z√°sobn√≠ku je {value}.",
        topError: "Top(S): CHYBA ‚Äì z√°sobn√≠k je pr√°zdn√Ω!",
        empty: "IsEmpty(S): True (z√°sobn√≠k je pr√°zdn√Ω).",
        notEmpty: "IsEmpty(S): False (z√°sobn√≠k nen√≠ pr√°zdn√Ω).",
        full: "IsFull(S): True (z√°sobn√≠k je pln√Ω).",
        notFull: "IsFull(S): False (z√°sobn√≠k nen√≠ pln√Ω).",
        addFull: "Push(S, El): ≈Ω√°dn√° akce - pokus o p≈ôid√°n√≠ prvku do pln√©ho z√°sobn√≠ku.",
        removeEmpty: "Pop(S): ≈Ω√°dn√° akce - pokus o odstranƒõn√≠ prvku z pr√°zdn√©ho z√°sobn√≠ku.",
    },

    queue: {
        front: "Front(Q): Hodnota prvn√≠ho prvku ve frontƒõ je {value}.",
        frontError: "Front(Q): CHYBA ‚Äì fronta je pr√°zdn√°!",
        empty: "IsEmpty(Q): True (fronta je pr√°zdn√°).",
        notEmpty: "IsEmpty(Q): False (fronta nen√≠ pr√°zdn√°).",
        full: "IsFull(Q): True (fronta je pln√°).",
        notFull: "IsFull(Q): False (fronta nen√≠ pln√°).",
        addFull: "Add(Q, El): ≈Ω√°dn√° akce - pokus o p≈ôid√°n√≠ prvku do pln√© fronty.",
        removeEmpty: "Remove(Q): ≈Ω√°dn√° akce - pokus o odstranƒõn√≠ prvku z pr√°zdn√© fronty.",
    },

    tree: {
        searchFound: "Search(T, K): True (uzel s kl√≠ƒçem {key} se nach√°z√≠ ve stromu).",
        searchNotFound: "Search(T, K): False (uzel s kl√≠ƒçem {key} se nenach√°z√≠ ve stromu).",
        height: "Height(T): Strom m√° v√Ω≈°ku {height}.",

        deleteEmpty: "Delete(T, K): ≈Ω√°dn√° akce - pokus o smaz√°n√≠ uzlu v pr√°zdn√©m stromu.",
    }
}