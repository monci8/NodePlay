export default {
    structures: {
        lists: "Zoznamy",
        singly: "Jednosmerne viazan√Ω",
        doubly: "Dvojsmerne viazan√Ω",
        circularSingly: "Kruhov√Ω jednosmern√Ω",
        activeList: "Aktivita zoznamu:",

        singlyList: "Jednosmerne viazan√Ω zoznam",
        doublyList: "Dvojsmerne viazan√Ω zoznam",
        circularSinglyList: "Kruhov√Ω jednosmern√Ω zoznam",

        stack: "Z√°sobn√≠k",
        queue: "Fronta",
        trees: "Stromov√© d√°tov√© ≈°trukt√∫ry",
        bvs: "Bin√°rny vyhƒæad√°vac√≠ strom",
        avl: "AVL strom",
        hashes: "Tabuƒæky s rozpt√Ωlen√Ωmi polo≈ækami"
    },

    methodBar: {
        initSentence: "Zadaj poƒçet prvkov, ktor√Ω sa m√° inicializova≈•:",
        count: "Poƒçet",
        key: "Kƒæ√∫ƒç",
        clear: "Zmaza≈•",
        enter: "Potvrƒèi≈•"
    },

    errors: {
        emptyInput: "Vstup nem√¥≈æe by≈• pr√°zdny!",
        onlyDigits: "Vstup mus√≠ obsahova≈• iba ƒç√≠slice!",
        max3Digits: "Maxim√°lne 3 cifry!",
        max3Chars: "Maxim√°lne 3 znaky!",
        max4Chars: "Maxim√°lne 4 znaky!",
        inputNumber: "Zadaj ƒç√≠slo!",
        biggerThanZero: "ƒå√≠slo mus√≠ by≈• v√§ƒç≈°ie ako 0!",
        lessThanHundred: "ƒå√≠slo mus√≠ by≈• men≈°ie ako 100!",
    },

    warnings: {
        animation: "Anim√°cia pr√°ve prebieha. M√¥≈æe≈° si ju kƒæudne zr√Ωchli≈•. üöÄ",
        mustClean: "Ak chce≈° vytvori≈• vlastn√∫ ≈°trukt√∫ru, najprv vyƒçisti plochu.",
        stack: {
            mustInit: "Najsk√¥r inicializuj ≈°trukt√∫ru pomocou `InitStack(S)` alebo `N√°hodne vygenerova≈• ≈°trukt√∫ru`.",
        },
        queue: {
            mustInit: "Najsk√¥r inicializuj ≈°trukt√∫ru pomocou `InitQueue(Q)` alebo `N√°hodne vygenerova≈• ≈°trukt√∫ru`.",
        },
        lists: {
            mustInit: "Najsk√¥r inicializuj ≈°trukt√∫ru pomocou `InitList(L)` alebo `N√°hodne vygenerova≈• ≈°trukt√∫ru`.",
            singlyNotActive: "Najsk√¥r aktivuj zoznam pomocou `First(L)`.",
            doublyNotActive: "Najsk√¥r aktivuj zoznam pomocou `First(L)` alebo `Last(L)`.",
        },
        tables: {
            mustInit: "Najsk√¥r inicializuj ≈°trukt√∫ru pomocou `InitTable(T)` alebo `N√°hodne vygenerova≈• ≈°trukt√∫ru`.",
        },
    },

    status: {
        animation: "Prebieha anim√°cia...",
        centering: "Prebieha centrovanie..."
    },

    home: {
        welcome: "Vitaj v NodePlay!",
        description: "T√°to aplik√°cia ti umo≈æn√≠ interakt√≠vne presk√∫ma≈• d√°tov√© ≈°trukt√∫ry a algoritmy nad nimi.",
        tutorialButton: "Zaƒça≈• s tutori√°lom"
    },

    tutorial: {
        title: "Ako pou≈æ√≠va≈• aplik√°ciu",
        steps: [
            "V ƒæavom menu si vyber d√°tov√∫ ≈°trukt√∫ru (napr. Bin√°rny vyhƒæad√°vac√≠ strom).",
            "V pravom menu inicializuj ≈°trukt√∫ru (InitTable) a pridaj uzly pomocou oper√°cie Insert. Pr√≠padne si m√¥≈æe≈° necha≈• ≈°trukt√∫ru vygenerova≈• n√°hodne.",
            "Vstup m√¥≈æe≈° pou≈æi≈• ten predgenerovan√Ω, alebo si zada≈• vlastn√Ω.",
            "Stredn√° ƒças≈• zobrazuje anim√°ciu vykonanej oper√°cie.",
            "Prep√≠naƒçom m√¥≈æe≈° zvoli≈•, ƒçi chce≈° ≈°trukt√∫ru pos√∫va≈• a pribli≈æova≈• manu√°lne, alebo sa pred a po anim√°cii vykon√° automatick√© centrovanie.",
            "Pomocou posuvn√≠ka si nastav r√Ωchlos≈• anim√°cie.",
            "Ak sa ti ≈°trukt√∫ra n√°hodou strat√≠ na pl√°tne, m√¥≈æe≈° ju vycentrova≈•. Pre resetovanie ≈°trukt√∫ry vyƒçisti plochu.",
            "Niektor√© met√≥dy vracaj√∫ v√Ωsledok ‚Äì ten sa zobraz√≠ vo v√Ωstupnom dial√≥gu.",
            "V hlaviƒçke m√¥≈æe≈° prepn√∫≈• jazyk alebo otvori≈• tento tutori√°l."
        ]
    },
    header: {
        lang: "Jazyk:",
        tutorial: "Ako pou≈æ√≠va≈• aplik√°ciu",
        center: "Centrova≈• graf"
    },

    slider: {
        title: "R√Ωchlos≈• anim√°cie",
        slow: "Pomal≈°ie",
        fast: "R√Ωchlej≈°ie"
    },

    footer: {
        random: "N√°hodne vygenerova≈• ≈°trukt√∫ru",
        clear: "Vyƒçisti≈• plochu",
        automaticCenter: "Automatick√© centrovanie",
        manualCenter: "Manu√°lne pos√∫vanie",
        speed: {
            slowest: "Najpomal≈°ie",
            slower: "Pomal≈°ie",
            medium: "Stredn√°",
            faster: "R√Ωchlej≈°ie",
            fastest: "Najr√Ωchlej≈°ie",
            unknown: "Nezn√°ma r√Ωchlos≈•"
        }
    },

    outputDialog: {
        label: "V√Ωstup"
    },

    list: {
        getFirstValue: "GetFirst(L): Hodnota prv√©ho prvku je {value}.",
        getFirstError: "GetFirst(L): CHYBA ‚Äì zoznam je pr√°zdny!",
        getLastValue: "GetLast(L): Hodnota posledn√©ho prvku je {value}.",
        getLastError: "GetLast(L): CHYBA ‚Äì zoznam je pr√°zdny!",
        getActiveValue: "GetValue(L): Hodnota akt√≠vneho prvku je {value}.",
        getActiveError: "GetValue(L): CHYBA ‚Äì zoznam nie je akt√≠vny!",
        notActive: "IsActive(L): False (zoznam nie je akt√≠vny).",
        active: "IsActive(L): True (zoznam je akt√≠vny).",

        deleteFirstEmpty: "DeleteFirst(L): ≈Ωiadna akcia - pokus o vymazanie prv√©ho prvku v pr√°zdnom zozname.",
        deleteAfterEmpty: "DeleteAfter(L): ≈Ωiadna akcia - pokus o vymazanie neexistuj√∫ceho prvku za akt√≠vnym prvkom.",
        deleteLastEmpty: "DeleteLast(L): ≈Ωiadna akcia - pokus o vymazanie posledn√©ho prvku v pr√°zdnom zozname.",
        deleteBeforeEmpty: "DeleteBefore(L): ≈Ωiadna akcia - pokus o vymazanie prvku pred akt√≠vnym prvkom v pr√°zdnom zozname.",
        firstEmpty: "First(L): ≈Ωiadna akcia - zoznam je pr√°zdny.",
        lastEmpty: "Last(L): ≈Ωiadna akcia - zoznam je pr√°zdny.",
        setActiveValue: "SetValue(L): Hodnota akt√≠vneho prvku bola zmenen√° na hodnotu {value}.",
    },

    stack: {
        top: "Top(S): Hodnota prvku na vrchole z√°sobn√≠ka je {value}.",
        topError: "Top(S): CHYBA ‚Äì z√°sobn√≠k je pr√°zdny!",
        empty: "IsEmpty(S): True (z√°sobn√≠k je pr√°zdny).",
        notEmpty: "IsEmpty(S): False (z√°sobn√≠k nie je pr√°zdny).",
        full: "IsFull(S): True (z√°sobn√≠k je pln√Ω).",
        notFull: "IsFull(S): False (z√°sobn√≠k nie je pln√Ω).",
        addFull: "Push(S, El): ≈Ωiadna akcia - pokus o pridanie prvku do pln√©ho z√°sobn√≠ka.",
        removeEmpty: "Pop(S): ≈Ωiadna akcia - pokus o odstr√°nenie prvku z pr√°zdneho z√°sobn√≠ka.",
    },

    queue: {
        front: "Front(Q): Hodnota prvku na zaƒçiatku fronty je {value}.",
        frontError: "Front(Q): CHYBA ‚Äì fronta je pr√°zdna!",
        empty: "IsEmpty(Q): True (fronta je pr√°zdna).",
        notEmpty: "IsEmpty(Q): False (fronta nie je pr√°zdna).",
        full: "IsFull(Q): True (fronta je pln√°).",
        notFull: "IsFull(Q): False (fronta nie je pln√°).",
        addFull: "Add(Q, El): ≈Ωiadna akcia - pokus o pridanie prvku do plnej fronty.",
        removeEmpty: "Remove(Q): ≈Ωiadna akcia - pokus o odstr√°nenie prvku z pr√°zdnej fronty.",
    },

    tree: {
        searchFound: "Search(T, K): True (uzol s kƒæ√∫ƒçom {key} sa nach√°dza v strome).",
        searchNotFound: "Search(T, K): False (uzol s kƒæ√∫ƒçom {key} sa nenach√°dza v strome).",
        height: "Height(T): Strom m√° v√Ω≈°ku {height}.",

        deleteEmpty: "Delete(T, K): ≈Ωiadna akcia - pokus o vymazanie uzla v pr√°zdnom strome.",
    }
}
